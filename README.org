#+TITLE: Liquid Haskell Proofs
* Goals
- Formally prove the theorems outlined in the “Reasoning about
  Programs” chapter of the book “Programming in Haskell” using Liquid
  Haskell
- Formally prove the theoerms in the paper “Calculating Correct
  Compilers” which the chapter was adapted from.
* Tasks
** Chapter
*** TODO ~reverse [x] = [x]~
*** TODO ~add n Zero = n~
*** TODO ~add x (add y z) = add (add x y) z~
*** TODO ~length (replicate n x) = n~
*** TODO ~reverse (reverse xs) = xs~ and corresponding lemmas
*** TODO ~reverse xs = reverse′ [] xs~
*** TODO ~reverse = foldl (:) []~
*** TODO ~flatten t = flatten′ t []~
*** TODO ~exec (comp e) [] = [eval e]~ and corresponding lemmas
*** TODO ~exec (comp′ e c) s = exec c (eval e : s)~
** Exercises
*** TODO ~add n (Succ m) = Succ (add n m)~
*** TODO ~add n m = add m n~
*** TODO ~all (== x) (replicate n x)~
*** TODO ~xs ++ [] = xs~
*** TODO ~xs ++ (ys ++ zs) = (xs ++ ys) ++ zs~
*** TODO ~reverse (xs ++ [x]) = x : reverse xs~
*** TODO ~map f (map g xs) = map (f . g) xs~
*** TODO ~take n xs ++ drop n xs = xs~
*** TODO the number of leaves in a binary tree without empty nodes is one more than the number of internal nodes
*** TODO construct ~comp′~ given ~comp′ e c = comp e ++ c~ (this might not be in scope).
